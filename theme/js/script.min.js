(() => {
  // javascript/script.js
  document.addEventListener("DOMContentLoaded", function() {
    const flatpickrElem = document.getElementById("datepicker");
    if (flatpickrElem) {
      flatpickr("#datepicker", {
        dateFormat: "Y-m-d",
        // Формат даты
        minDate: "today"
      });
    }
    const dropdownButtons = document.querySelectorAll(".dropdown-button");
    const dropdownMenus = document.querySelectorAll(".dropdown-menu");
    if (dropdownButtons.length && dropdownMenus.length) {
      let updateDropdownText2 = function(radio) {
        const dropdownText = radio.closest(".relative").querySelector(".dropdown-text");
        const span = radio.nextElementSibling;
        if (dropdownText && span) {
          dropdownText.textContent = span.textContent;
        }
      };
      var updateDropdownText = updateDropdownText2;
      dropdownButtons.forEach((button, index) => {
        button.addEventListener("click", function() {
          const menu = dropdownMenus[index];
          const isExpanded = menu.classList.contains("hidden");
          const closeOnClick = button.getAttribute("data-close-on-click") === "true";
          dropdownMenus.forEach((otherMenu, otherIndex) => {
            if (otherIndex !== index) {
              otherMenu.classList.add("hidden");
              dropdownButtons[otherIndex].setAttribute("aria-expanded", "false");
            }
          });
          if (isExpanded) {
            menu.classList.remove("hidden");
            button.setAttribute("aria-expanded", "true");
          } else {
            menu.classList.add("hidden");
            button.setAttribute("aria-expanded", "false");
          }
          if (closeOnClick) {
            const menuItems = menu.querySelectorAll(".item");
            menuItems.forEach((item) => {
              item.addEventListener("click", function() {
                menu.classList.add("hidden");
                button.setAttribute("aria-expanded", "false");
              });
            });
          }
        });
      });
      const changeTextElements = document.querySelectorAll(".change_text");
      changeTextElements.forEach((item) => {
        item.addEventListener("click", function() {
          updateDropdownText2(item);
        });
      });
      window.addEventListener("click", function(event) {
        if (!event.target.closest(".relative")) {
          dropdownMenus.forEach((menu) => menu.classList.add("hidden"));
          dropdownButtons.forEach((button) => button.setAttribute("aria-expanded", "false"));
        }
      });
    }
    const categoryIdElem = document.getElementById("category_id");
    if (categoryIdElem) {
      let getCardsForDate2 = function(arr = "") {
        const getCheckedValues = (name) => {
          const checkedRadio = document.querySelector(`input[name="${name}"]:checked`);
          return checkedRadio ? checkedRadio.value : "";
        };
        const contentTours = document.querySelector(".content__tours");
        const cards = document.querySelectorAll(".card");
        const date = document.getElementById("datepicker").value ?? "";
        const duration = getCheckedValues("duration") ?? "";
        const haveSale = getCheckedValues("have_sale") ?? 0;
        const sorts = getCheckedValues("grade");
        cards.forEach((card) => card.style.display = "block");
        cards.forEach((card) => {
          if (haveSale) {
            console.log("haveSale>>", haveSale);
            if (!card.dataset.sale || card.dataset.sale !== "1") {
              card.style.display = "none";
            }
          }
          if (duration) {
            const cardDuration = parseFloat(card.dataset.duration);
            console.log("duration>>", duration, cardDuration);
            if (duration === "3") {
              if (cardDuration > 3.5 || !cardDuration) card.style.display = "none";
            } else if (duration === "5") {
              if (cardDuration <= 3 || cardDuration >= 5.5 || !cardDuration) card.style.display = "none";
            } else if (duration === "more5") {
              if (cardDuration < 5 || !cardDuration) card.style.display = "none";
            }
          }
          if (sorts) {
            const cardsSort = Array.from(contentTours.getElementsByClassName("card"));
            cardsSort.sort((a, b) => {
              const costA = parseInt(a.getAttribute("data-cost"), 10);
              const costB = parseInt(b.getAttribute("data-cost"), 10);
              const costC = parseInt(a.getAttribute("data-popular"), 10);
              const costD = parseInt(b.getAttribute("data-popular"), 10);
              if (sorts === "expensive") {
                return costA - costB;
              } else if (sorts === "chip") {
                return costB - costA;
              } else {
                return costC - costD;
              }
            });
            contentTours.innerHTML = "";
            cardsSort.forEach((card2) => contentTours.appendChild(card2));
          }
        });
      };
      var getCardsForDate = getCardsForDate2;
      const categoryId = document.getElementById("category_id").value;
      document.getElementById("filter-form").addEventListener("change", function() {
        console.log("form is changed!");
        getCardsForDate2();
      });
    }
    const wishButtons = document.querySelectorAll(".wish-btn");
    if (wishButtons) {
      let currentProducts = getCookie("product");
      try {
        currentProducts = currentProducts ? JSON.parse(currentProducts) : [];
      } catch (e) {
        console.error("Error parsing cookies:", e);
        currentProducts = [];
      }
      wishButtons.forEach((button) => {
        const productId = button.getAttribute("data-wp-id");
        if (currentProducts.includes(productId)) {
          button.classList.add("active");
        }
      });
    }
    const devContainer = document.getElementById("posts-container");
    if (devContainer) {
      devContainer.addEventListener("click", (event) => {
        const button = event.target.closest(".wish-btn");
        if (!button) return;
        let currentProducts = getCookie("product");
        try {
          currentProducts = currentProducts ? JSON.parse(currentProducts) : [];
        } catch (e) {
          console.error("Error parsing cookies:", e);
          currentProducts = [];
        }
        const productId = button.getAttribute("data-wp-id");
        if (currentProducts.includes(productId)) {
          currentProducts = currentProducts.filter((id) => id !== productId);
          button.classList.remove("active");
        } else {
          currentProducts.push(productId);
          button.classList.add("active");
        }
        setCookie("product", JSON.stringify(currentProducts), 7);
      });
    }
    function getCookie(name) {
      const cookieArr = document.cookie.split(";");
      for (let i = 0; i < cookieArr.length; i++) {
        let cookie = cookieArr[i].trim();
        if (cookie.startsWith(name + "=")) {
          return cookie.substring(name.length + 1);
        }
      }
      return null;
    }
    function setCookie(name, value, days) {
      const date = /* @__PURE__ */ new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1e3);
      const expires = "expires=" + date.toUTCString();
      document.cookie = name + "=" + value + ";" + expires + ";path=/";
    }
    let filestoupload = [];
    function previewFiles() {
      const preview = document.querySelector("#preview");
      const files = document.querySelector("input[type=file]").files;
      function readAndPreview(file) {
        if (/\.(jpe?g|png|gif)$/i.test(file.name)) {
          const reader = new FileReader();
          if (file.size > 5242880) {
            alert("\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0440\u0430\u0437\u043C\u0435\u0440 \u0444\u0430\u0439\u043B\u0430 \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u043F\u0440\u0435\u0432\u044B\u0448\u0430\u0442\u044C 5\u041C\u0431");
          } else {
            reader.addEventListener("load", function() {
              const image = new Image();
              const z = document.createElement("div");
              z.textContent = file.name;
              image.height = 100;
              image.title = file.name;
              image.src = this.result;
              filestoupload.push(file);
              const div = document.createElement("div");
              const divdel = document.createElement("div");
              divdel.className = "delete";
              divdel.textContent = "X";
              div.className = "fileprew";
              div.appendChild(divdel);
              div.appendChild(z);
              preview.appendChild(div);
              console.log("Files to upload:", filestoupload.length);
              console.log("File name:", file.name);
              console.log("File size:", file.size);
            }, false);
            reader.readAsDataURL(file);
          }
        }
      }
      if (files) {
        Array.from(files).forEach(readAndPreview);
      }
    }
    document.body.addEventListener("click", function(event) {
      if (event.target.classList.contains("delete")) {
        const index = Array.from(document.querySelectorAll(".delete")).indexOf(event.target);
        console.log("\u0423\u0434\u0430\u043B\u044F\u0435\u043C \u0444\u0430\u0439\u043B:", index);
        filestoupload.splice(index, 1);
        event.target.parentElement.remove();
        console.log("Files to upload:", filestoupload.length);
      }
    });
    const formContainer = document.querySelector(".reviews_form");
    if (formContainer) {
      formContainer.addEventListener("submit", function(e) {
        e.preventDefault();
        const thisForm = e.target;
        const name = thisForm.querySelector("[name=name]").value;
        const formData = new FormData(thisForm);
        filestoupload.forEach((file, index) => {
          formData.append(`file[${index}]`, file);
        });
        if (!name) {
          const nameField = document.querySelector(".name_field input");
          nameField.classList.add("alert");
          window.scrollTo({
            top: document.querySelector(".reviews_form").offsetTop - 50,
            behavior: "smooth"
          });
          return;
        }
        fetch("/wp-json/custom/v1/reviews-form", {
          method: "POST",
          headers: {
            // Убедитесь, что REST API доступен без авторизации или передайте токен авторизации.
            //'X-WP-Nonce': wpApiSettings.nonce // Если требуется авторизация
          },
          body: formData
        }).then((response) => {
          if (!response.ok) {
            return response.json().then((err) => {
              throw new Error(err.message || "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0435 \u0444\u043E\u0440\u043C\u044B");
            });
          }
          return response.json();
        }).then((data) => {
          console.log("\u041E\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:", data);
        }).catch((error) => {
          console.error("\u041E\u0448\u0438\u0431\u043A\u0430:", error);
          alert(error.message || "\u0427\u0442\u043E-\u0442\u043E \u043F\u043E\u0448\u043B\u043E \u043D\u0435 \u0442\u0430\u043A");
        }).finally(() => {
        });
      });
    }
  });
})();
